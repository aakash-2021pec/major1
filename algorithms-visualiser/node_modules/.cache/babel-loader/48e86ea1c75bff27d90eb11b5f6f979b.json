{"ast":null,"code":"/*\r\n-----------------------\r\nBACKTRACKING ALGORITHMS\r\n-----------------------\r\n*/\n\n/* -----------------------\r\nN Queen Problem Algorithms\r\n-------------------------- */\nfunction createBoard(size) {\n  const board = [];\n\n  for (let i = 0; i < size; i++) {\n    board.push(getRowsOfZeroes(size));\n  }\n\n  return board;\n}\n\nexport function getNQueensAnimations(size, animations = []) {\n  const board = createBoard(size);\n  solveNQueenUtil(board, 0, animations);\n  return board;\n}\n\nfunction solveNQueenUtil(board = [], col, animations = []) {\n  let N = board.length;\n  if (col >= N) return true;\n\n  for (let i = 0; i < N; i++) {\n    if (isSafe(board, i, col)) {\n      board[i][col] = true;\n      animations.push([i, col, true]);\n      if (solveNQueenUtil(board, col + 1, animations)) return true;\n      board[i][col] = false;\n      animations.push([i, col, false]);\n    }\n  }\n\n  return false;\n}\n\nfunction isSafe(board = [], row, col) {\n  let N = board.length;\n\n  for (let i = 0; i < col; i++) {\n    if (board[row][i] === true) {\n      return false;\n    }\n  }\n\n  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n    if (board[i][j] === true) {\n      return false;\n    }\n  }\n\n  for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\n    if (board[i][j] === true) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function getRowsOfZeroes(size) {\n  const row = [];\n\n  for (let i = 0; i < size; i++) {\n    row.push(false);\n  }\n\n  return row;\n}\n/* ----------------------\r\nRat In A Maze Solving Algorithms\r\n------------------------- */\n\nfunction isRatSafe(maze = [], x, y) {\n  let mazeRows = maze.length;\n  let mazeCols = maze[0].length;\n  return x >= 0 && x < mazeRows && y >= 0 && y < mazeCols && maze[x][y] === 1;\n}\n\nfunction solveRatInAMaze(maze = [], x, y, sol = [], animations = []) {\n  let endOfMazeX = maze.length - 1;\n  let endOfMazeY = maze[0].length - 1; // Goal State || Base Case\n\n  if (x === endOfMazeX && y === endOfMazeY && maze[x][y] === 1) {\n    sol[x][y] = 1;\n    animations.push([x, y, true]);\n    return true;\n  } // Check if maze is valid\n\n\n  if (isRatSafe(maze, x, y)) {\n    animations.push([x, y, true]);\n    sol[x][y] = 1; // Move Down\n\n    if (solveRatInAMaze(maze, x, y + 1, sol, animations)) return true; // Move Right\n\n    if (solveRatInAMaze(maze, x + 1, y, sol, animations)) return true; // No Move is Possible -> Backtrack\n    else {\n        animations.push([x, y, false]);\n        sol[x][y] = 0;\n        return false;\n      }\n  }\n\n  return false;\n}\n\nexport function solveMaze(maze = [], sol = []) {\n  const animations = [];\n\n  if (!solveRatInAMaze(maze, 0, 0, sol, animations)) {\n    console.log(\"Solution doesn't\");\n    return [sol, []];\n  }\n\n  return [sol, animations];\n}\nexport function prepareSolutionBoardOfZeroes(size) {\n  let sol = [];\n\n  for (let i = 0; i < size; i++) {\n    var temp = [];\n\n    for (let j = 0; j < size; j++) {\n      temp.push(0);\n    }\n\n    sol.push(temp);\n  }\n\n  return sol;\n}","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/backTrackingAlgorithms/backTrackingAlgorithms.js"],"names":["createBoard","size","board","i","push","getRowsOfZeroes","getNQueensAnimations","animations","solveNQueenUtil","col","N","length","isSafe","row","j","isRatSafe","maze","x","y","mazeRows","mazeCols","solveRatInAMaze","sol","endOfMazeX","endOfMazeY","solveMaze","console","log","prepareSolutionBoardOfZeroes","temp"],"mappings":"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","sourcesContent":["/*\r\n-----------------------\r\nBACKTRACKING ALGORITHMS\r\n-----------------------\r\n*/\r\n\r\n/* -----------------------\r\nN Queen Problem Algorithms\r\n-------------------------- */\r\n\r\nfunction createBoard(size) {\r\n    const board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board.push(getRowsOfZeroes(size));\r\n    }\r\n    return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n    const board = createBoard(size);\r\n    solveNQueenUtil(board, 0, animations);\r\n    return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n    let N = board.length;\r\n\r\n    if (col >= N) return true;\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        if (isSafe(board, i, col)) {\r\n            board[i][col] = true;\r\n            animations.push([i, col, true]);\r\n            if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n            board[i][col] = false;\r\n            animations.push([i, col, false]);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n    let N = board.length;\r\n\r\n    for (let i = 0; i < col; i++) {\r\n        if (board[row][i] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n    const row = [];\r\n    for (let i = 0; i < size; i++) {\r\n        row.push(false);\r\n    }\r\n    return row;\r\n}\r\n\r\n/* ----------------------\r\nRat In A Maze Solving Algorithms\r\n------------------------- */\r\n\r\nfunction isRatSafe(maze = [], x, y) {\r\n    let mazeRows = maze.length;\r\n    let mazeCols = maze[0].length;\r\n\r\n    return x >= 0 && x < mazeRows && y >= 0 && y < mazeCols && maze[x][y] === 1;\r\n}\r\n\r\nfunction solveRatInAMaze(maze = [], x, y, sol = [], animations = []) {\r\n    let endOfMazeX = maze.length - 1;\r\n    let endOfMazeY = maze[0].length - 1;\r\n\r\n    // Goal State || Base Case\r\n    if (x === endOfMazeX && y === endOfMazeY && maze[x][y] === 1) {\r\n        sol[x][y] = 1;\r\n        animations.push([x, y, true]);\r\n        return true;\r\n    }\r\n\r\n    // Check if maze is valid\r\n    if (isRatSafe(maze, x, y)) {\r\n        animations.push([x, y, true]);\r\n        sol[x][y] = 1;\r\n\r\n        // Move Down\r\n        if (solveRatInAMaze(maze, x, y + 1, sol, animations)) return true;\r\n        // Move Right\r\n        if (solveRatInAMaze(maze, x + 1, y, sol, animations)) return true;\r\n        // No Move is Possible -> Backtrack\r\n        else {\r\n            animations.push([x, y, false]);\r\n            sol[x][y] = 0;\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function solveMaze(maze = [], sol = []) {\r\n    const animations = [];\r\n    if (!solveRatInAMaze(maze, 0, 0, sol, animations)) {\r\n        console.log(\"Solution doesn't\");\r\n        return [sol, []];\r\n    }\r\n    return [sol, animations];\r\n}\r\n\r\nexport function prepareSolutionBoardOfZeroes(size) {\r\n    let sol = [];\r\n    for (let i = 0; i < size; i++) {\r\n        var temp = [];\r\n        for (let j = 0; j < size; j++) {\r\n            temp.push(0);\r\n        }\r\n        sol.push(temp);\r\n    }\r\n    return sol;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}