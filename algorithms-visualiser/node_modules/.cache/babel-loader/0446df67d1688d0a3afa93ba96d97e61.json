{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sharm\\\\OneDrive\\\\Documents\\\\GitHub\\\\major1\\\\algorithms-visualiser\\\\src\\\\backTrackingAlgorithms\\\\nQueensProblem\\\\nQueensProblem.jsx\";\nimport React from \"react\";\nimport crown from \"./../nQueensProblem/crown.png\";\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\nimport BackBar from './../../utils/backbar'; // Stylesheets\n\nimport \"./../../utils/animate.min.css\";\nimport \"./nQueensProblem.css\";\nconst SIZE_OF_BOARD = 4;\nvar ANIMATION_SPEED_SECONDS = 1.5;\nconst CELL_COLOR = \"#BFC9CA\";\nconst SAFE_COLOR = \"#DC143C\";\nconst CROWN_COLOR = \"#FFFFFF\";\nconst SAFE = \"#2ECC71\";\nexport default class NQueensProblem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: false\n    };\n  }\n\n  componentDidMount() {\n    this.drawBoard(SIZE_OF_BOARD);\n  }\n\n  drawBoard(SIZE) {\n    // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\n    let padding = 0;\n    let fontSize = 0; // Deleting the previous board cells and results section for new start\n\n    document.getElementById(\"nQueensBoard\").innerHTML = \"\";\n    document.getElementById(\"NQueenResults\").innerHTML = \"\"; // Calculating the board size and style values\n\n    switch (SIZE) {\n      case 4:\n        padding = 20;\n        fontSize = 30;\n        ANIMATION_SPEED_SECONDS = 1.5;\n        break;\n\n      case 5:\n      case 6:\n        padding = 10;\n        fontSize = 25;\n        ANIMATION_SPEED_SECONDS = 1;\n        break;\n\n      case 7:\n        padding = 7;\n        fontSize = 20;\n        ANIMATION_SPEED_SECONDS = 0.5;\n        break;\n\n      case 8:\n        padding = 7;\n        fontSize = 18;\n        ANIMATION_SPEED_SECONDS = 0.5;\n        break;\n\n      default:\n        return;\n    } // creating the board\n\n\n    const container = document.getElementById(\"nQueensBoard\"); // Adding Rows and Columns to the board\n\n    container.style.setProperty(\"--Qgrid-rows\", SIZE);\n    container.style.setProperty(\"--Qgrid-cols\", SIZE); // Adding cells to the board\n\n    for (let j = 0; j < SIZE * SIZE; j++) {\n      let cell = document.createElement(\"div\");\n      let item = document.createElement(\"i\");\n      cell.appendChild(item).className = \"fas fa-crown\";\n      container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\n    } // Styling the cells\n\n\n    const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\n    const crownsI = document.getElementsByClassName(\"fa-crown\");\n\n    for (let l = 0; l < arrayTiles.length; l++) {\n      arrayTiles[l].style.padding = `${padding}px`;\n      arrayTiles[l].style.backgroundColor = CELL_COLOR;\n      crownsI[l].style.fontSize = `${fontSize}px`;\n      crownsI[l].style.color = CELL_COLOR;\n    } // Since everything is just created dynamically we have to apply styles\n    // one by one to each element because depending on the board size we are\n    // determining the corressponding styles.\n\n  }\n\n  NQueensProblem() {\n    // Getting the size from the input box\n    let size = parseInt(document.getElementById(\"boardInput\").value); // checking if size is greater than 3 because no solutions exist for n <= 3\n    // checking if size is lesser than 17 because the user's RAM will be\n    // used heavily for greater sizes and page can be unresponsive.\n\n    if (size < 4 || size > 8) {\n      alert(\"Board Size must be between 4 and 8\");\n      return;\n    } // finally drawing the board\n\n\n    this.drawBoard(size); // getting the cells for visualisations\n\n    const arrayTiles = document.getElementsByClassName(\"q-array-tile\"); // getting the crown element inside the cell\n\n    const crown = document.getElementsByClassName(\"fa-crown\"); // getting the results div\n\n    const resultsDiv = document.getElementById(\"NQueenResults\"); // getting the Animations for NQueens.\n\n    const NQueensAnimations = [];\n    getNQueensAnimations(size, NQueensAnimations);\n    let count = 0;\n\n    for (let i = 0; i < NQueensAnimations.length; i++) {\n      count++; // Disabling all the input sources untill Algorithm is finished.\n\n      this.setState({\n        disabled: true\n      });\n      const [row, col, isQueenSafe] = NQueensAnimations[i];\n      const idx = size * row + col; // Creating an alert message for Progress Section\n\n      let alert = document.createElement(\"div\");\n      alert.classList.add(\"alert\");\n      alert.classList.add(\"animate__animated\");\n      alert.classList.add(\"animate__slideInDown\");\n      setTimeout(() => {\n        // checking if this is a valid position\n        if (isQueenSafe) {\n          // valid positions are highlighted as RED which is royal\n          arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\n          arrayTiles[idx].classList.add(\"safe-queen\"); // making the crown visible\n\n          crown[idx].style.color = CROWN_COLOR; // popping up the crown with an effect\n\n          crown[idx].classList.add(\"popupQueen\"); // Adding the alert message for results div\n\n          alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\n          alert.classList.add(\"alert-success\");\n        } else {\n          // invalid positions are highlighted as default board color\n          arrayTiles[idx].style.backgroundColor = CELL_COLOR;\n          arrayTiles[idx].classList.remove(\"safe-queen\"); // making the crown invisible\n\n          crown[idx].style.color = CELL_COLOR; // removing the popup animation\n\n          crown[idx].classList.remove(\"popupQueen\"); // Adding the alert message for results div\n\n          alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\n          alert.classList.add(\"alert-danger\");\n        } // adding alert to results div\n\n\n        resultsDiv.prepend(alert); // adding a transition for color change\n\n        arrayTiles[idx].style.transition = \"200ms all\";\n      }, ANIMATION_SPEED_SECONDS * 1000 * i); // looping according to animation speeds\n    } // getting the queens at final safe positions\n\n\n    const trueValues = document.getElementsByClassName(\"safe-queen\");\n    setTimeout(() => {\n      for (let i = 0; i < trueValues.length; i++) {\n        trueValues[i].style.backgroundColor = SAFE;\n        trueValues[i].style.transition = \"300ms all\"; // Enabling the input sources for another visualization\n\n        this.setState({\n          disabled: false\n        }); // This means we have reached at final positions with Queens placed\n        // on Valid positions\n\n        if (i === trueValues.length - 1) {\n          // Adding final alert message\n          let alert = document.createElement(\"div\");\n          alert.classList.add(\"alert\");\n          alert.classList.add(\"animate__animated\");\n          alert.classList.add(\"animate__slideInUp\");\n          alert.innerHTML = `All Queens have been placed on Valid positions`;\n          alert.classList.add(\"alert-primary\"); // Prepending the alert message\n\n          resultsDiv.prepend(alert);\n        }\n      }\n    }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\n  }\n\n  render() {\n    const {\n      disabled\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BackBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"mb-2\",\n      src: crown,\n      width: \"40px\",\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 45\n      }\n    }), \" \", \"N-Queens Visualiser\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Qbox Qboard mb-2\",\n      id: \"nQueensBoard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mt-1 container col-sm-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 41\n      }\n    }, \"Board Size\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"boardInput\",\n      className: \"form-control\",\n      placeholder: \"Board Size\",\n      defaultValue: \"4\",\n      readOnly: disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-secondary\",\n      disabled: disabled,\n      onClick: () => this.NQueensProblem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 41\n      }\n    }, \"Visualise N-Queens\")))), !disabled ? /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 41\n      }\n    }), \"The Visualiser works best for board sizes between 4 and 8 inclusive. Larger board sizes would make the page unresponsive because of huge number of computations. \\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 41\n      }\n    }, \"GitHub Repo for this project\"))) : null), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"NQueenResults\",\n      className: \"col-sm-4 mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx"],"names":["React","crown","getNQueensAnimations","BackBar","SIZE_OF_BOARD","ANIMATION_SPEED_SECONDS","CELL_COLOR","SAFE_COLOR","CROWN_COLOR","SAFE","NQueensProblem","Component","constructor","props","state","disabled","componentDidMount","drawBoard","SIZE","padding","fontSize","document","getElementById","innerHTML","container","style","setProperty","j","cell","createElement","item","appendChild","className","arrayTiles","getElementsByClassName","crownsI","l","length","backgroundColor","color","size","parseInt","value","alert","resultsDiv","NQueensAnimations","count","i","setState","row","col","isQueenSafe","idx","classList","add","setTimeout","remove","prepend","transition","trueValues","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport crown from \"./../nQueensProblem/crown.png\";\r\n\r\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\r\n\r\nimport BackBar from './../../utils/backbar'\r\n\r\n// Stylesheets\r\nimport \"./../../utils/animate.min.css\";\r\nimport \"./nQueensProblem.css\";\r\n\r\nconst SIZE_OF_BOARD = 4;\r\nvar ANIMATION_SPEED_SECONDS = 1.5;\r\n\r\nconst CELL_COLOR = \"#BFC9CA\";\r\nconst SAFE_COLOR = \"#DC143C\";\r\nconst CROWN_COLOR = \"#FFFFFF\";\r\nconst SAFE = \"#2ECC71\";\r\n\r\nexport default class NQueensProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { disabled: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(SIZE_OF_BOARD);\r\n    }\r\n\r\n    drawBoard(SIZE) {\r\n        // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\r\n        let padding = 0;\r\n        let fontSize = 0;\r\n\r\n        // Deleting the previous board cells and results section for new start\r\n        document.getElementById(\"nQueensBoard\").innerHTML = \"\";\r\n        document.getElementById(\"NQueenResults\").innerHTML = \"\";\r\n\r\n        // Calculating the board size and style values\r\n        switch (SIZE) {\r\n            case 4:\r\n                padding = 20;\r\n                fontSize = 30;\r\n                ANIMATION_SPEED_SECONDS = 1.5;\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                padding = 10;\r\n                fontSize = 25;\r\n                ANIMATION_SPEED_SECONDS = 1;\r\n                break;\r\n            case 7:\r\n                padding = 7;\r\n                fontSize = 20;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            case 8:\r\n                padding = 7;\r\n                fontSize = 18;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // creating the board\r\n        const container = document.getElementById(\"nQueensBoard\");\r\n\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n        container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n        // Adding cells to the board\r\n        for (let j = 0; j < SIZE * SIZE; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            let item = document.createElement(\"i\");\r\n\r\n            cell.appendChild(item).className = \"fas fa-crown\";\r\n            container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n        }\r\n\r\n        // Styling the cells\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n        const crownsI = document.getElementsByClassName(\"fa-crown\");\r\n        for (let l = 0; l < arrayTiles.length; l++) {\r\n            arrayTiles[l].style.padding = `${padding}px`;\r\n            arrayTiles[l].style.backgroundColor = CELL_COLOR;\r\n            crownsI[l].style.fontSize = `${fontSize}px`;\r\n            crownsI[l].style.color = CELL_COLOR;\r\n        }\r\n\r\n        // Since everything is just created dynamically we have to apply styles\r\n        // one by one to each element because depending on the board size we are\r\n        // determining the corressponding styles.\r\n    }\r\n\r\n    NQueensProblem() {\r\n        // Getting the size from the input box\r\n        let size = parseInt(document.getElementById(\"boardInput\").value);\r\n\r\n        // checking if size is greater than 3 because no solutions exist for n <= 3\r\n        // checking if size is lesser than 17 because the user's RAM will be\r\n        // used heavily for greater sizes and page can be unresponsive.\r\n        if (size < 4 || size > 8) {\r\n            alert(\"Board Size must be between 4 and 8\");\r\n            return;\r\n        }\r\n        // finally drawing the board\r\n        this.drawBoard(size);\r\n\r\n        // getting the cells for visualisations\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n\r\n        // getting the crown element inside the cell\r\n        const crown = document.getElementsByClassName(\"fa-crown\");\r\n\r\n        // getting the results div\r\n        const resultsDiv = document.getElementById(\"NQueenResults\");\r\n\r\n        // getting the Animations for NQueens.\r\n        const NQueensAnimations = [];\r\n        getNQueensAnimations(size, NQueensAnimations);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < NQueensAnimations.length; i++) {\r\n            count++;\r\n\r\n            // Disabling all the input sources untill Algorithm is finished.\r\n            this.setState({ disabled: true });\r\n\r\n            const [row, col, isQueenSafe] = NQueensAnimations[i];\r\n            const idx = size * row + col;\r\n\r\n            // Creating an alert message for Progress Section\r\n            let alert = document.createElement(\"div\");\r\n            alert.classList.add(\"alert\");\r\n            alert.classList.add(\"animate__animated\");\r\n            alert.classList.add(\"animate__slideInDown\");\r\n\r\n            setTimeout(() => {\r\n                // checking if this is a valid position\r\n                if (isQueenSafe) {\r\n                    // valid positions are highlighted as RED which is royal\r\n                    arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\r\n                    arrayTiles[idx].classList.add(\"safe-queen\");\r\n\r\n                    // making the crown visible\r\n                    crown[idx].style.color = CROWN_COLOR;\r\n                    // popping up the crown with an effect\r\n                    crown[idx].classList.add(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\r\n                    alert.classList.add(\"alert-success\");\r\n                } else {\r\n                    // invalid positions are highlighted as default board color\r\n                    arrayTiles[idx].style.backgroundColor = CELL_COLOR;\r\n                    arrayTiles[idx].classList.remove(\"safe-queen\");\r\n\r\n                    // making the crown invisible\r\n                    crown[idx].style.color = CELL_COLOR;\r\n                    // removing the popup animation\r\n                    crown[idx].classList.remove(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\r\n                    alert.classList.add(\"alert-danger\");\r\n                }\r\n                // adding alert to results div\r\n                resultsDiv.prepend(alert);\r\n                // adding a transition for color change\r\n                arrayTiles[idx].style.transition = \"200ms all\";\r\n            }, ANIMATION_SPEED_SECONDS * 1000 * i);\r\n            // looping according to animation speeds\r\n        }\r\n\r\n        // getting the queens at final safe positions\r\n        const trueValues = document.getElementsByClassName(\"safe-queen\");\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < trueValues.length; i++) {\r\n                trueValues[i].style.backgroundColor = SAFE;\r\n                trueValues[i].style.transition = \"300ms all\";\r\n\r\n                // Enabling the input sources for another visualization\r\n                this.setState({ disabled: false });\r\n\r\n                // This means we have reached at final positions with Queens placed\r\n                // on Valid positions\r\n                if (i === trueValues.length - 1) {\r\n                    // Adding final alert message\r\n                    let alert = document.createElement(\"div\");\r\n                    alert.classList.add(\"alert\");\r\n                    alert.classList.add(\"animate__animated\");\r\n                    alert.classList.add(\"animate__slideInUp\");\r\n                    alert.innerHTML = `All Queens have been placed on Valid positions`;\r\n                    alert.classList.add(\"alert-primary\");\r\n\r\n                    // Prepending the alert message\r\n                    resultsDiv.prepend(alert);\r\n                }\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <center>\r\n                                        <h2>\r\n                                            <img\r\n                                                className=\"mb-2\"\r\n                                                src={crown}\r\n                                                width=\"40px\"\r\n                                                alt={\"\"}\r\n                                            />{\" \"}\r\n                                            N-Queens Visualiser\r\n                                        </h2>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"Qbox Qboard mb-2\"\r\n                                id=\"nQueensBoard\"\r\n                            ></div>\r\n                            <div className=\"row\">\r\n                                <div className=\"input-group mt-1 container col-sm-6\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <span className=\"input-group-text\">\r\n                                            Board Size\r\n                                        </span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"boardInput\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Board Size\"\r\n                                        defaultValue=\"4\"\r\n                                        readOnly={disabled}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-secondary\"\r\n                                            disabled={disabled}\r\n                                            onClick={() =>\r\n                                                this.NQueensProblem()\r\n                                            }\r\n                                        >\r\n                                            Visualise N-Queens\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {!disabled ? (\r\n                                <center>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"mt-2\"></div>\r\n                                        The Visualiser works best for board\r\n                                        sizes between 4 and 8 inclusive. Larger\r\n                                        board sizes would make the page\r\n                                        unresponsive because of huge number of\r\n                                        computations. &nbsp;\r\n                                        <a href=\"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\">\r\n                                            GitHub Repo for this project\r\n                                        </a>\r\n                                    </small>\r\n                                </center>\r\n                            ) : null}\r\n                        </div>\r\n                        <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}