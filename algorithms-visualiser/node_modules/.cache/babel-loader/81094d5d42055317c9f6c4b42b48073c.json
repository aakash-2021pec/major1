{"ast":null,"code":"export function wordDFS(grid = [], word, animations = []) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const {\n        row,\n        col,\n        val,\n        visited\n      } = grid[i][j];\n      animations.push([i, j, \"testing\", \"not-found\"]);\n\n      if (val === word.charAt(0) && dfs(grid, row, col, 0, word, animations) && !visited) {\n        grid[i][j].visited = true;\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction dfs(grid = [], i, j, count, word, animations = []) {\n  if (count === word.length) return true;\n\n  if (i >= 0 && i < grid.length && j >= 0 && j < grid[i].length) {\n    animations.push([i, j, \"not-found\", \"not-found\"]);\n  }\n\n  if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j].val !== word.charAt(count)) return false;\n  let temp = grid[i][j].val;\n  grid[i][j].val = \" \";\n  var found = dfs(grid, i + 1, j, count + 1, word, animations) || dfs(grid, i - 1, j, count + 1, word, animations) || dfs(grid, i, j + 1, count + 1, word, animations) || dfs(grid, i, j - 1, count + 1, word, animations);\n\n  if (found === true) {\n    animations.push([i, j, \"not-found\", \"found\"]);\n  } else {\n    animations.push([i, j, \"not-found\", \"not-found\"]);\n  }\n\n  grid[i][j].val = temp;\n  return found;\n}","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/wordSearchVisualiser/algorithms/wordDFS.js"],"names":["wordDFS","grid","word","animations","i","length","j","row","col","val","visited","push","charAt","dfs","count","temp","found"],"mappings":"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","sourcesContent":["export function wordDFS(grid = [], word, animations = []) {\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            const { row, col, val, visited } = grid[i][j];\r\n            animations.push([i, j, \"testing\", \"not-found\"]);\r\n            if (\r\n                val === word.charAt(0) &&\r\n                dfs(grid, row, col, 0, word, animations) &&\r\n                !visited\r\n            ) {\r\n                grid[i][j].visited = true;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction dfs(grid = [], i, j, count, word, animations = []) {\r\n    if (count === word.length) return true;\r\n\r\n    if (i >= 0 && i < grid.length && j >= 0 && j < grid[i].length) {\r\n        animations.push([i, j, \"not-found\", \"not-found\"]);\r\n    }\r\n\r\n    if (\r\n        i < 0 ||\r\n        i >= grid.length ||\r\n        j < 0 ||\r\n        j >= grid[i].length ||\r\n        grid[i][j].val !== word.charAt(count)\r\n    )\r\n        return false;\r\n    let temp = grid[i][j].val;\r\n    grid[i][j].val = \" \";\r\n\r\n    var found =\r\n        dfs(grid, i + 1, j, count + 1, word, animations) ||\r\n        dfs(grid, i - 1, j, count + 1, word, animations) ||\r\n        dfs(grid, i, j + 1, count + 1, word, animations) ||\r\n        dfs(grid, i, j - 1, count + 1, word, animations);\r\n\r\n    if (found === true) {\r\n        animations.push([i, j, \"not-found\", \"found\"]);\r\n    } else {\r\n        animations.push([i, j, \"not-found\", \"not-found\"]);\r\n    }\r\n    grid[i][j].val = temp;\r\n    return found;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}