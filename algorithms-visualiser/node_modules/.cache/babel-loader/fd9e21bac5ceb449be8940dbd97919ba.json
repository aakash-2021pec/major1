{"ast":null,"code":"export function convert1Dto2DArray(OneDArray, ROWS, COLS) {\n  const twoDArray = [];\n\n  for (let i = 0; i < ROWS; i++) {\n    const oneDRow = [];\n\n    for (let j = 0; j < COLS; j++) {\n      const {\n        col,\n        row\n      } = OneDArray[i * ROWS + j];\n\n      if (i === row && j === col) {\n        oneDRow.push(OneDArray[i * ROWS + j]);\n      }\n    }\n\n    twoDArray.push(oneDRow);\n  }\n\n  return twoDArray;\n}\nexport function convert2Dto1DArray(TwoDArray) {\n  const OneDArray = [];\n\n  for (let i = 0; i < TwoDArray.length; i++) {\n    for (let j = 0; j < TwoDArray[i].length; j++) {\n      OneDArray.push(TwoDArray[i][j]);\n    }\n  }\n\n  return OneDArray;\n}","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/pathFinderVisualiser/pathfinder-utils/arrayConversions.js"],"names":["convert1Dto2DArray","OneDArray","ROWS","COLS","twoDArray","i","oneDRow","j","col","row","push","convert2Dto1DArray","TwoDArray","length"],"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,SAA5B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmD;AACtD,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;AAC3B,UAAMC,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC3B,YAAM;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAeR,SAAS,CAACI,CAAC,GAAGH,IAAJ,GAAWK,CAAZ,CAA9B;;AACA,UAAIF,CAAC,KAAKI,GAAN,IAAaF,CAAC,KAAKC,GAAvB,EAA4B;AACxBF,QAAAA,OAAO,CAACI,IAAR,CAAaT,SAAS,CAACI,CAAC,GAAGH,IAAJ,GAAWK,CAAZ,CAAtB;AACH;AACJ;;AACDH,IAAAA,SAAS,CAACM,IAAV,CAAeJ,OAAf;AACH;;AACD,SAAOF,SAAP;AACH;AAED,OAAO,SAASO,kBAAT,CAA4BC,SAA5B,EAAuC;AAC1C,QAAMX,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,SAAS,CAACC,MAA9B,EAAsCR,CAAC,EAAvC,EAA2C;AACvC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,SAAS,CAACP,CAAD,CAAT,CAAaQ,MAAjC,EAAyCN,CAAC,EAA1C,EAA8C;AAC1CN,MAAAA,SAAS,CAACS,IAAV,CAAeE,SAAS,CAACP,CAAD,CAAT,CAAaE,CAAb,CAAf;AACH;AACJ;;AACD,SAAON,SAAP;AACH","sourcesContent":["export function convert1Dto2DArray(OneDArray, ROWS, COLS) {\r\n    const twoDArray = [];\r\n    for (let i = 0; i < ROWS; i++) {\r\n        const oneDRow = [];\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { col, row } = OneDArray[i * ROWS + j];\r\n            if (i === row && j === col) {\r\n                oneDRow.push(OneDArray[i * ROWS + j]);\r\n            }\r\n        }\r\n        twoDArray.push(oneDRow);\r\n    }\r\n    return twoDArray;\r\n}\r\n\r\nexport function convert2Dto1DArray(TwoDArray) {\r\n    const OneDArray = [];\r\n    for (let i = 0; i < TwoDArray.length; i++) {\r\n        for (let j = 0; j < TwoDArray[i].length; j++) {\r\n            OneDArray.push(TwoDArray[i][j]);\r\n        }\r\n    }\r\n    return OneDArray;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}