{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getBubbleSortAnimations(array = []) {\n  const animations = [];\n  let isSorted = false;\n  let counter = 0;\n\n  while (!isSorted) {\n    isSorted = true;\n\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      if (array[i] > array[i + 1]) {\n        swap(i, i + 1, array);\n        isSorted = false;\n        animations.push([i, i + 1, array[i], array[i + 1]]);\n      } else {\n        animations.push([i, i + 1, array[i], array[i + 1]]);\n      }\n    }\n\n    counter++;\n  }\n\n  return animations;\n}\nexport function getInsertionSortAnimations(array = []) {\n  const animations = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let j = i;\n\n    while (j > 0 && array[j] < array[j - 1]) {\n      swap(j, j - 1, array);\n      animations.push([j, j - 1, array[j], array[j - 1]]);\n      j -= 1;\n    }\n  }\n\n  return animations;\n}\nexport function getSelectionSortAnimations(array = []) {\n  const animations = [];\n  let currentIdx = 0;\n\n  while (currentIdx < array.length - 1) {\n    let smallestIdx = currentIdx;\n\n    for (let i = currentIdx + 1; i < array.length; i++) {\n      if (array[smallestIdx] > array[i]) smallestIdx = i;\n    }\n\n    if (currentIdx < smallestIdx) {\n      swap(currentIdx, smallestIdx, array);\n      animations.push([currentIdx, smallestIdx, array[currentIdx], array[smallestIdx]]);\n    }\n\n    currentIdx++;\n  }\n\n  return animations;\n}\n\nfunction quickSortHelper(array = [], left, right, animations = []) {\n  let pivot = array[Math.floor((right + left) / 2)],\n      i = left,\n      j = right;\n\n  while (i <= j) {\n    while (array[i] < pivot) i++;\n\n    while (array[j] > pivot) j--;\n\n    if (i <= j) {\n      swap(i, j, array);\n      animations.push([i, j, array[i++], array[j--]]);\n    }\n  }\n\n  return i;\n}\n\nexport function getQuickSortAnimations(items = [], left, right, animations = []) {\n  let index;\n\n  if (items.length > 1) {\n    index = quickSortHelper(items, left, right, animations);\n\n    if (left < index - 1) {\n      getQuickSortAnimations(items, left, index - 1, animations);\n    }\n\n    if (index < right) {\n      getQuickSortAnimations(items, index, right, animations);\n    }\n  }\n\n  return animations;\n}\nexport function getHeapSortAnimations(array = [], animations = []) {\n  buildMaxHeap(array, animations);\n  let lastElement = array.length - 1;\n\n  while (lastElement > 0) {\n    swap(0, lastElement, array);\n    animations.push([0, lastElement, array[0], array[lastElement]]);\n    heapify(array, 0, lastElement, animations);\n    lastElement -= 1;\n  }\n}\n\nfunction buildMaxHeap(array = [], animations = []) {\n  let i;\n  i = array.length / 2 - 1;\n  i = Math.floor(i);\n\n  while (i >= 0) {\n    heapify(array, i, array.length, animations);\n    i -= 1;\n  }\n}\n\nfunction heapify(heap = [], i, max, animations = []) {\n  let index, leftChild, righChild;\n\n  while (i < max) {\n    index = i;\n    leftChild = 2 * i + 1;\n    righChild = leftChild + 1;\n    if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\n    if (righChild < max && heap[righChild] > heap[index]) index = righChild;\n    if (index === i) return;\n    swap(i, index, heap);\n    animations.push([i, index, heap[i], heap[index]]);\n    i = index;\n  }\n}\n\nfunction swap(i, j, arr = []) {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getBubbleSortAnimations","isSorted","counter","swap","getInsertionSortAnimations","getSelectionSortAnimations","currentIdx","smallestIdx","quickSortHelper","left","right","pivot","getQuickSortAnimations","items","index","getHeapSortAnimations","buildMaxHeap","lastElement","heapify","heap","max","leftChild","righChild","arr","temp"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array = []) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            } else {\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array = []) {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let j = i;\r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            swap(j, j - 1, array);\r\n            animations.push([j, j - 1, array[j], array[j - 1]]);\r\n            j -= 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array = []) {\r\n    const animations = [];\r\n    let currentIdx = 0;\r\n    while (currentIdx < array.length - 1) {\r\n        let smallestIdx = currentIdx;\r\n        for (let i = currentIdx + 1; i < array.length; i++) {\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n        }\r\n        if (currentIdx < smallestIdx) {\r\n            swap(currentIdx, smallestIdx, array);\r\n            animations.push([\r\n                currentIdx,\r\n                smallestIdx,\r\n                array[currentIdx],\r\n                array[smallestIdx],\r\n            ]);\r\n        }\r\n        currentIdx++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array = [], left, right, animations = []) {\r\n    let pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) i++;\r\n\r\n        while (array[j] > pivot) j--;\r\n\r\n        if (i <= j) {\r\n            swap(i, j, array);\r\n            animations.push([i, j, array[i++], array[j--]]);\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function getQuickSortAnimations(\r\n    items = [],\r\n    left,\r\n    right,\r\n    animations = []\r\n) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = quickSortHelper(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            getQuickSortAnimations(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            getQuickSortAnimations(items, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getHeapSortAnimations(array = [], animations = []) {\r\n    buildMaxHeap(array, animations);\r\n    let lastElement = array.length - 1;\r\n    while (lastElement > 0) {\r\n        swap(0, lastElement, array);\r\n        animations.push([0, lastElement, array[0], array[lastElement]]);\r\n        heapify(array, 0, lastElement, animations);\r\n        lastElement -= 1;\r\n    }\r\n}\r\n\r\nfunction buildMaxHeap(array = [], animations = []) {\r\n    let i;\r\n    i = array.length / 2 - 1;\r\n    i = Math.floor(i);\r\n    while (i >= 0) {\r\n        heapify(array, i, array.length, animations);\r\n        i -= 1;\r\n    }\r\n}\r\n\r\nfunction heapify(heap = [], i, max, animations = []) {\r\n    let index, leftChild, righChild;\r\n\r\n    while (i < max) {\r\n        index = i;\r\n        leftChild = 2 * i + 1;\r\n        righChild = leftChild + 1;\r\n\r\n        if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\r\n\r\n        if (righChild < max && heap[righChild] > heap[index]) index = righChild;\r\n\r\n        if (index === i) return;\r\n\r\n        swap(i, index, heap);\r\n        animations.push([i, index, heap[i], heap[index]]);\r\n        i = index;\r\n    }\r\n}\r\n\r\nfunction swap(i, j, arr = []) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}