{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sharm\\\\OneDrive\\\\Documents\\\\GitHub\\\\major1\\\\algorithms-visualiser\\\\src\\\\sortingAlgorithms\\\\sortingVisualiser.jsx\";\nimport React from \"react\";\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\nimport ComplexityTable from \"./complexityTable\";\nimport { getMergeSortAnimations, getBubbleSortAnimations, getInsertionSortAnimations, getSelectionSortAnimations, getQuickSortAnimations, getHeapSortAnimations } from \"./sortingAlgorithms\";\nimport cellColors from \"./cellColors\"; // Stylesheets\n\nimport \"./sortingVisualiser.css\";\nimport BackBar from \"./../utils/backbar\";\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\nconst color = cellColors[SELECTED].reverse();\nconst SIZE_OF_BOARD = 20; // Size of Board -> N x N Size of 1D Array\n\nvar ANIMATION_SPEED = 1; // Greater Value -> Slower Animation\n\nconst CELL_CORNER_BORDER_RADIUS = 3;\nexport default class SortingVisualiser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: false,\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\n      let val = randomIntFromInterval(0, color.length - 1);\n      array.push(val);\n    }\n\n    this.setState({\n      array\n    });\n    this.drawBoard(array);\n  }\n\n  drawBoard(arrayBoard = []) {\n    document.getElementById(\"sortingBoard\").innerHTML = \"\"; // creating the board\n\n    const container = document.getElementById(\"sortingBoard\"); // Adding Rows and Columns to the board\n\n    container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\n    container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD); // Adding cells to the board\n\n    for (let j = 0; j < arrayBoard.length; j++) {\n      let cell = document.createElement(\"div\");\n      container.appendChild(cell).className = \"grid-item\";\n      let cellStyle = cell.style;\n      cellStyle.backgroundColor = color[arrayBoard[j]]; // styling the corners\n\n      if (j === 0) {\n        cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      } else if (j === SIZE_OF_BOARD - 1) {\n        cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\n        cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\n        cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      }\n    }\n  }\n\n  selectAlgorithm() {\n    let selectedValue = parseInt(document.getElementById(\"sortingAlgoDropDown\").value);\n\n    switch (selectedValue) {\n      case 0:\n        alert(\"Select An Algorithm First!\");\n        break;\n\n      case 1:\n        this.bubbleSort();\n        break;\n\n      case 2:\n        this.selectionSort();\n        break;\n\n      case 3:\n        this.insertionSort();\n        break;\n\n      case 4:\n        this.quickSort();\n        break;\n\n      case 5:\n        this.heapSort();\n        break;\n\n      case 6:\n        this.mergeSort();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  visualiseAnimations(animations = [], speedFactor) {\n    this.setState({\n      disabled: true\n    });\n    setTimeout(() => {\n      const arrayBlocks = document.getElementsByClassName(\"grid-item\");\n      let count = 0;\n\n      for (let i = 0; i < animations.length; i++) {\n        const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\n        const blockOne = arrayBlocks[idxOne];\n        const blockTwo = arrayBlocks[idxTwo];\n        const blockOneStyle = blockOne.style;\n        const blockTwoStyle = blockTwo.style;\n        setTimeout(() => {\n          blockOneStyle.backgroundColor = color[elemOne];\n          blockTwoStyle.backgroundColor = color[elemTwo];\n          blockOneStyle.transition = \"150ms all\";\n          blockTwoStyle.transition = \"150ms all\";\n        }, ANIMATION_SPEED * speedFactor * (i + 1));\n        count++;\n      }\n\n      setTimeout(() => {\n        for (let i = 0; i < arrayBlocks.length; i++) {\n          setTimeout(() => {\n            arrayBlocks[i].classList.add(\"popupBlocks\");\n          }, ANIMATION_SPEED * i);\n        }\n\n        this.setState({\n          disabled: false\n        });\n      }, ANIMATION_SPEED * speedFactor * (count + 1));\n    }, 1000);\n  }\n\n  mergeSort() {\n    this.setState({\n      disabled: true\n    });\n    setTimeout(() => {\n      const animations = getMergeSortAnimations(this.state.array);\n      let count = 0;\n      const arrayBlocks = document.getElementsByClassName(\"grid-item\");\n\n      for (let i = 0; i < animations.length; i++) {\n        setTimeout(() => {\n          const [blockOneIdx, newColor] = animations[i];\n          const blockOneStyle = arrayBlocks[blockOneIdx].style;\n          blockOneStyle.backgroundColor = color[newColor];\n          blockOneStyle.transition = \"150ms all\";\n        }, i * ANIMATION_SPEED);\n        count++;\n      }\n\n      setTimeout(() => {\n        for (let i = 0; i < arrayBlocks.length; i++) {\n          setTimeout(() => {\n            arrayBlocks[i].classList.add(\"popupBlocks\");\n          }, ANIMATION_SPEED * i);\n        }\n\n        this.setState({\n          disabled: false\n        });\n      }, ANIMATION_SPEED * (count + 1));\n    }, 1000);\n  }\n\n  quickSort() {\n    const animations = [];\n    getQuickSortAnimations(this.state.array, 0, this.state.array.length - 1, animations);\n    this.visualiseAnimations(animations, 3.5);\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    this.visualiseAnimations(animations, 0.4);\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    this.visualiseAnimations(animations, 0.8);\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    this.visualiseAnimations(animations, 50);\n  }\n\n  heapSort() {\n    const animations = [];\n    getHeapSortAnimations(this.state.array, animations);\n    this.visualiseAnimations(animations, 2);\n  }\n\n  render() {\n    const {\n      disabled\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BackBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box shadowT board\",\n      id: \"sortingBoard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-5 mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      className: \"btn btn-danger\",\n      disabled: disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 37\n      }\n    }, \"New Array\")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"sortingAlgoDropDown\",\n      disabled: disabled,\n      defaultValue: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      disabled: true,\n      value: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 37\n      }\n    }, \"Algorithm\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 37\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 37\n      }\n    }, \"Selection Sort\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 37\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 37\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 37\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 37\n      }\n    }, \"Merge Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.selectAlgorithm(),\n      className: \"btn btn-success\",\n      disabled: disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 37\n      }\n    }, \"Visualize\"))), /*#__PURE__*/React.createElement(ComplexityTable, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/sortingAlgorithms/sortingVisualiser.jsx"],"names":["React","randomIntFromInterval","ComplexityTable","getMergeSortAnimations","getBubbleSortAnimations","getInsertionSortAnimations","getSelectionSortAnimations","getQuickSortAnimations","getHeapSortAnimations","cellColors","BackBar","SELECTED","length","color","reverse","SIZE_OF_BOARD","ANIMATION_SPEED","CELL_CORNER_BORDER_RADIUS","SortingVisualiser","Component","constructor","props","state","disabled","array","componentDidMount","resetArray","i","val","push","setState","drawBoard","arrayBoard","document","getElementById","innerHTML","container","style","setProperty","j","cell","createElement","appendChild","className","cellStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","selectAlgorithm","selectedValue","parseInt","value","alert","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","visualiseAnimations","animations","speedFactor","setTimeout","arrayBlocks","getElementsByClassName","count","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","transition","classList","add","blockOneIdx","newColor","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\r\nimport ComplexityTable from \"./complexityTable\";\r\nimport {\r\n    getMergeSortAnimations,\r\n    getBubbleSortAnimations,\r\n    getInsertionSortAnimations,\r\n    getSelectionSortAnimations,\r\n    getQuickSortAnimations,\r\n    getHeapSortAnimations,\r\n} from \"./sortingAlgorithms\";\r\n\r\nimport cellColors from \"./cellColors\";\r\n\r\n// Stylesheets\r\nimport \"./sortingVisualiser.css\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\r\nconst color = cellColors[SELECTED].reverse();\r\n\r\nconst SIZE_OF_BOARD = 20; // Size of Board -> N x N Size of 1D Array\r\nvar ANIMATION_SPEED = 1; // Greater Value -> Slower Animation\r\nconst CELL_CORNER_BORDER_RADIUS = 3;\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\r\n            let val = randomIntFromInterval(0, color.length - 1);\r\n            array.push(val);\r\n        }\r\n        this.setState({ array });\r\n        this.drawBoard(array);\r\n    }\r\n\r\n    drawBoard(arrayBoard = []) {\r\n        document.getElementById(\"sortingBoard\").innerHTML = \"\";\r\n        // creating the board\r\n        const container = document.getElementById(\"sortingBoard\");\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\r\n        container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\r\n        // Adding cells to the board\r\n        for (let j = 0; j < arrayBoard.length; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            container.appendChild(cell).className = \"grid-item\";\r\n            let cellStyle = cell.style;\r\n            cellStyle.backgroundColor = color[arrayBoard[j]];\r\n\r\n            // styling the corners\r\n            if (j === 0) {\r\n                cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\r\n                cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        let selectedValue = parseInt(\r\n            document.getElementById(\"sortingAlgoDropDown\").value\r\n        );\r\n        switch (selectedValue) {\r\n            case 0:\r\n                alert(\"Select An Algorithm First!\");\r\n                break;\r\n            case 1:\r\n                this.bubbleSort();\r\n                break;\r\n            case 2:\r\n                this.selectionSort();\r\n                break;\r\n            case 3:\r\n                this.insertionSort();\r\n                break;\r\n            case 4:\r\n                this.quickSort();\r\n                break;\r\n            case 5:\r\n                this.heapSort();\r\n                break;\r\n            case 6:\r\n                this.mergeSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    visualiseAnimations(animations = [], speedFactor) {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            let count = 0;\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\r\n                const blockOne = arrayBlocks[idxOne];\r\n                const blockTwo = arrayBlocks[idxTwo];\r\n                const blockOneStyle = blockOne.style;\r\n                const blockTwoStyle = blockTwo.style;\r\n\r\n                setTimeout(() => {\r\n                    blockOneStyle.backgroundColor = color[elemOne];\r\n                    blockTwoStyle.backgroundColor = color[elemTwo];\r\n\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                    blockTwoStyle.transition = \"150ms all\";\r\n                }, ANIMATION_SPEED * speedFactor * (i + 1));\r\n                count++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * speedFactor * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            let count = 0;\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [blockOneIdx, newColor] = animations[i];\r\n                    const blockOneStyle = arrayBlocks[blockOneIdx].style;\r\n                    blockOneStyle.backgroundColor = color[newColor];\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                }, i * ANIMATION_SPEED);\r\n                count++;\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = [];\r\n        getQuickSortAnimations(\r\n            this.state.array,\r\n            0,\r\n            this.state.array.length - 1,\r\n            animations\r\n        );\r\n        this.visualiseAnimations(animations, 3.5);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.4);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.8);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 50);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = [];\r\n        getHeapSortAnimations(this.state.array, animations);\r\n        this.visualiseAnimations(animations, 2);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"box shadowT board\"\r\n                                id=\"sortingBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 mt-1\">\r\n                            <div className=\"input-group mt-1\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        New Array\r\n                                    </button>\r\n                                </div>\r\n                                <select\r\n                                    className=\"custom-select\"\r\n                                    id=\"sortingAlgoDropDown\"\r\n                                    disabled={disabled}\r\n                                    defaultValue=\"0\"\r\n                                >\r\n                                    <option disabled value=\"0\">\r\n                                        Algorithm\r\n                                    </option>\r\n                                    <option value=\"1\">Bubble Sort</option>\r\n                                    <option value=\"2\">Selection Sort</option>\r\n                                    <option value=\"3\">Insertion Sort</option>\r\n                                    <option value=\"4\">Quick Sort</option>\r\n                                    <option value=\"5\">Heap Sort</option>\r\n                                    <option value=\"6\">Merge Sort</option>\r\n                                </select>\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.selectAlgorithm()}\r\n                                        className=\"btn btn-success\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Visualize\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <ComplexityTable />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}