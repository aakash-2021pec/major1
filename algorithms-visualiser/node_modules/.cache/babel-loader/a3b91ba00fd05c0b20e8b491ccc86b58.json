{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sharm\\\\OneDrive\\\\Documents\\\\GitHub\\\\major1\\\\algorithms-visualiser\\\\src\\\\pathFinderVisualiser\\\\pathfinderVisualiser.jsx\";\nimport React from \"react\"; // Importing Node Component to display Node on Grid\n\nimport Node from \"./Node/Node\"; // Array Conversion Functions\n\nimport { convert1Dto2DArray, convert2Dto1DArray } from \"./pathfinder-utils/arrayConversions\"; // Pathfinding Algorithms\n\nimport { dijkstra } from \"./pathFindingAlgorithms/dijkstra\";\nimport { bfs } from \"./pathFindingAlgorithms/breadthFirstSearch\";\nimport { dfs } from \"./pathFindingAlgorithms/depthFirstSearch\";\nimport { astar } from \"./pathFindingAlgorithms/astar\";\nimport { bidirectionalSearch } from \"./pathFindingAlgorithms/bidirectionalSearch\"; // Maze Generation Algorithm\n\nimport { generateMaze } from \"./generateMaze\";\nimport BackBar from \"./../utils/backbar\"; // Highlight Board Functions\n\nimport { highlightGrid, unHighlightGrid, highlightGridDiagonals, unHighlightGridDiagonals } from \"./pathfinder-utils/highlightMazeNodes\"; // Legend Component\n\nimport Legend from \"./pathfinder-utils/legend\"; // Complexity table\n\nimport ComplexityTable from \"./pathfinder-utils/complexityTable\"; //Stylesheets\n\nimport \"./pathfinderVisualiser.css\";\nconst x = 3;\nconst ROWS = 46 - x;\nconst COLS = 46 - x; // Constants to toggle Start/Finish/Wall on Grid\n\nconst START_NODE_STATE = 1;\nconst END_NODE_STATE = 2;\nconst WALL_NODE_STATE = 3;\nconst SPEED = 25;\nexport default class PathFinderVisualiser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      modifyingNodeState: 0,\n      START_NODE_ROW: 2,\n      START_NODE_COL: 2,\n      FINISH_NODE_ROW: ROWS - 3,\n      FINISH_NODE_COL: COLS - 3,\n      disableMazesButton: false,\n      disableNodesButton: false,\n      disableClearMazeButton: false,\n      highlightMazeNodes: true,\n      isGridDiagonalsHighlighted: false,\n      speed: SPEED\n    };\n  }\n\n  componentDidMount() {\n    this.setUpGrid();\n  }\n\n  setUpGrid() {\n    const grid = [];\n    const gridBox = document.getElementById(\"grid\");\n    gridBox.style.setProperty(\"--p-grid-rows\", ROWS);\n    gridBox.style.setProperty(\"--p-grid-cols\", COLS);\n\n    for (let i = 0; i < ROWS; i++) for (let j = 0; j < COLS; j++) grid.push(this.createNode(i, j));\n\n    this.setState({\n      grid\n    });\n  }\n\n  clearBoard() {\n    this.setUpGrid();\n    const grid = this.state.grid;\n\n    for (let i = 0; i < grid.length; i++) {\n      const node = grid[i];\n      document.getElementById(`node-${node.row}-${node.col}`).classList.remove(\"node-visited\");\n      document.getElementById(`node-${node.row}-${node.col}`).classList.remove(\"node-shortest-path\");\n    }\n\n    this.setState({\n      disableMazesButton: false,\n      disableNodesButton: false,\n      highlightMazeNodes: true\n    });\n  }\n\n  selectAlgorithm() {\n    const algorithm = parseInt(document.getElementById(\"pathFindingAlgoDropDown\").value);\n    if (algorithm !== 0) this.visualiseAlgorithms(algorithm);else {\n      alert(\"Select an Algorithm first!\");\n      return;\n    }\n  }\n\n  visualiseAlgorithms(algorithm) {\n    this.setState({\n      disableNodesButton: true,\n      disableMazesButton: true,\n      disableClearMazeButton: true,\n      modifyingNodeState: 0\n    });\n    const {\n      grid,\n      START_NODE_COL,\n      START_NODE_ROW,\n      FINISH_NODE_COL,\n      FINISH_NODE_ROW\n    } = this.state;\n    const d2Grid = convert1Dto2DArray(grid, ROWS, COLS);\n    const STARTNODE = d2Grid[START_NODE_ROW][START_NODE_COL];\n    const FINISHNODE = d2Grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    var visitedNodesInOrder, nodesInShortestPathOrder;\n\n    switch (algorithm) {\n      case 0:\n        alert(\"Select an algorithm first!\");\n        this.setState({\n          disableMazesButton: false,\n          disableNodesButton: false\n        });\n        return;\n\n      case 1:\n        [visitedNodesInOrder, nodesInShortestPathOrder] = dijkstra(d2Grid, STARTNODE, FINISHNODE);\n        break;\n\n      case 2:\n        [visitedNodesInOrder, nodesInShortestPathOrder] = bfs(d2Grid, STARTNODE, FINISHNODE);\n        break;\n\n      case 3:\n        [visitedNodesInOrder, nodesInShortestPathOrder] = astar(d2Grid, STARTNODE, FINISHNODE);\n        break;\n\n      case 4:\n        const [source_visited, dest_visited, sPathNodes, dPathNodes] = bidirectionalSearch(d2Grid, STARTNODE, FINISHNODE);\n        this.animatePath(source_visited, sPathNodes);\n        this.animatePath(dest_visited, dPathNodes);\n        return;\n\n      case 5:\n        [visitedNodesInOrder, nodesInShortestPathOrder] = dfs(d2Grid, STARTNODE, FINISHNODE);\n        break;\n\n      default:\n        return;\n    }\n\n    this.animatePath(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  highlightNodes(row, col) {\n    if (this.state.highlightMazeNodes) {\n      highlightGrid(row, col, ROWS, COLS);\n    }\n  }\n\n  unHighlightNodes(row, col) {\n    if (this.state.highlightMazeNodes) {\n      unHighlightGrid(row, col, ROWS, COLS);\n    }\n  } // change `isGridDiagonalsHighlighted` to true in state\n  // to highlight diagonals on board\n\n\n  highlightDiagonals() {\n    if (this.state.isGridDiagonalsHighlighted) {\n      const nodes = convert1Dto2DArray(this.state.grid.slice(), ROWS, COLS);\n      highlightGridDiagonals(nodes, ROWS, COLS);\n    }\n  }\n\n  unHighlightDiagonals() {\n    if (this.state.isGridDiagonalsHighlighted) {\n      const nodes = convert1Dto2DArray(this.state.grid.slice(), ROWS, COLS);\n      unHighlightGridDiagonals(nodes, ROWS, COLS);\n    }\n  }\n\n  toggleStartOrFinish(grid = [], row, col, NODE_ROW, NODE_COL, nodeType) {\n    const newGrid = grid.slice();\n    const currentNode = newGrid[ROWS * NODE_ROW + NODE_COL];\n    const newNode = newGrid[ROWS * row + col];\n\n    if (nodeType === \"START\") {\n      if (newNode.isWall || newNode.isFinish) {\n        return false;\n      } else {\n        currentNode.isStart = false;\n        newNode.isStart = true;\n        this.setState({\n          grid: newGrid\n        });\n        return true;\n      }\n    } else if (nodeType === \"FINISH\") {\n      if (newNode.isWall || newNode.isStart) {\n        return false;\n      } else {\n        currentNode.isFinish = false;\n        newNode.isFinish = true;\n        this.setState({\n          grid: newGrid\n        });\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  toggleWall(grid, row, col) {\n    const newGrid = grid.slice();\n    const currentNode = newGrid[ROWS * row + col];\n\n    if (!currentNode.isFinish && !currentNode.isStart) {\n      currentNode.isWall = !currentNode.isWall;\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleNodeOperations(row, col, NODE_STATE) {\n    const {\n      START_NODE_ROW,\n      START_NODE_COL,\n      FINISH_NODE_ROW,\n      FINISH_NODE_COL,\n      grid\n    } = this.state;\n\n    switch (NODE_STATE) {\n      case 1:\n        if (this.toggleStartOrFinish(grid, row, col, START_NODE_ROW, START_NODE_COL, \"START\")) {\n          this.setState({\n            START_NODE_ROW: row,\n            START_NODE_COL: col\n          });\n        }\n\n        break;\n\n      case 2:\n        if (this.toggleStartOrFinish(grid, row, col, FINISH_NODE_ROW, FINISH_NODE_COL, \"FINISH\")) {\n          this.setState({\n            FINISH_NODE_ROW: row,\n            FINISH_NODE_COL: col\n          });\n        }\n\n        break;\n\n      case 3:\n        this.toggleWall(grid, row, col);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  createNode(row, col) {\n    const {\n      START_NODE_ROW,\n      START_NODE_COL,\n      FINISH_NODE_ROW,\n      FINISH_NODE_COL\n    } = this.state;\n    return {\n      row,\n      col,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      cost: {\n        F: Infinity,\n        G: Infinity,\n        H: Infinity\n      }\n    };\n  }\n\n  modifyNodeState(STATE) {\n    this.setState({\n      modifyingNodeState: STATE\n    });\n  }\n\n  generateMaze(grid) {\n    this.setState({\n      disableMazesButton: true,\n      disableClearMazeButton: false\n    });\n    const twoDArray = convert1Dto2DArray(grid, ROWS, COLS);\n    const mazeGrid = generateMaze(twoDArray, ROWS, COLS);\n    const OneDArray = convert2Dto1DArray(mazeGrid);\n    this.setState({\n      grid: OneDArray\n    });\n  }\n\n  animatePath(visitedNodesInOrder, nodesInShortestPathOrder) {\n    this.setState({\n      disableNodesButton: true,\n      highlightMazeNodes: false\n    });\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.state.speed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n        }\n      }, this.state.speed * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).classList = \"node node-shortest-path\";\n        }\n\n        if (node.isFinish) {\n          setTimeout(() => {\n            this.setState({\n              disableClearMazeButton: false\n            });\n          }, 1000);\n        }\n      }, this.state.speed * i);\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      modifyingNodeState,\n      disableMazesButton,\n      disableNodesButton,\n      disableClearMazeButton\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BackBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-7 mb-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box shadowT mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onMouseOut: () => this.unHighlightDiagonals(),\n      onMouseOver: () => this.highlightDiagonals(),\n      id: \"grid\",\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 33\n      }\n    }, grid.map((node, idx) => {\n      const {\n        row,\n        col,\n        isStart,\n        isFinish,\n        isWall\n      } = node;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: idx,\n        col: col,\n        isFinish: isFinish,\n        isStart: isStart,\n        isWall: isWall,\n        row: row,\n        onNodeClick: (row, col) => this.handleNodeOperations(row, col, modifyingNodeState),\n        onNodeOver: (row, col) => this.highlightNodes(row, col),\n        onNodeOut: (row, col) => this.unHighlightNodes(row, col),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 45\n        }\n      });\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-5 shadowT rounded-b mb-2 bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btn-group btn-block mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      disabled: disableNodesButton,\n      className: \"btn bg-start\",\n      onClick: () => this.modifyNodeState(START_NODE_STATE),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 33\n      }\n    }, \"Place Source\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      disabled: disableNodesButton,\n      className: \"btn bg-end\",\n      onClick: () => this.modifyNodeState(END_NODE_STATE),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 33\n      }\n    }, \"Place Destination\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      disabled: disableNodesButton,\n      className: \"btn btn-dark\",\n      onClick: () => this.modifyNodeState(WALL_NODE_STATE),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 33\n      }\n    }, \"Place Wall\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btn-group btn-block mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      disabled: disableMazesButton,\n      className: \"btn btn-secondary\",\n      onClick: () => this.generateMaze(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 33\n      }\n    }, \"Generate Maze\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      disabled: disableClearMazeButton,\n      className: \"btn btn-secondary\",\n      onClick: () => this.clearBoard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 33\n      }\n    }, \"Clear Maze\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btn-group btn-block mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      disabled: disableNodesButton,\n      id: \"pathFindingAlgoDropDown\",\n      className: \"custom-select\",\n      defaultValue: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      disabled: true,\n      value: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 41\n      }\n    }, \"Select Algorithm\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 41\n      }\n    }, \"Dijkstras\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 41\n      }\n    }, \"Breadth First Search\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 41\n      }\n    }, \"Depth First Search\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 41\n      }\n    }, \"A* Search\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 41\n      }\n    }, \"Bi-Directional Search\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: disableNodesButton,\n      onClick: () => this.selectAlgorithm(),\n      className: \"btn bg-purple\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 41\n      }\n    }, \"Perform Search\")))), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(ComplexityTable, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/pathFinderVisualiser/pathfinderVisualiser.jsx"],"names":["React","Node","convert1Dto2DArray","convert2Dto1DArray","dijkstra","bfs","dfs","astar","bidirectionalSearch","generateMaze","BackBar","highlightGrid","unHighlightGrid","highlightGridDiagonals","unHighlightGridDiagonals","Legend","ComplexityTable","x","ROWS","COLS","START_NODE_STATE","END_NODE_STATE","WALL_NODE_STATE","SPEED","PathFinderVisualiser","Component","constructor","props","state","grid","modifyingNodeState","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","disableMazesButton","disableNodesButton","disableClearMazeButton","highlightMazeNodes","isGridDiagonalsHighlighted","speed","componentDidMount","setUpGrid","gridBox","document","getElementById","style","setProperty","i","j","push","createNode","setState","clearBoard","length","node","row","col","classList","remove","selectAlgorithm","algorithm","parseInt","value","visualiseAlgorithms","alert","d2Grid","STARTNODE","FINISHNODE","visitedNodesInOrder","nodesInShortestPathOrder","source_visited","dest_visited","sPathNodes","dPathNodes","animatePath","highlightNodes","unHighlightNodes","highlightDiagonals","nodes","slice","unHighlightDiagonals","toggleStartOrFinish","NODE_ROW","NODE_COL","nodeType","newGrid","currentNode","newNode","isWall","isFinish","isStart","toggleWall","handleNodeOperations","NODE_STATE","distance","Infinity","isVisited","previousNode","cost","F","G","H","modifyNodeState","STATE","twoDArray","mazeGrid","OneDArray","setTimeout","animateShortestPath","className","render","map","idx"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n// Importing Node Component to display Node on Grid\r\nimport Node from \"./Node/Node\";\r\n\r\n// Array Conversion Functions\r\nimport {\r\n    convert1Dto2DArray,\r\n    convert2Dto1DArray,\r\n} from \"./pathfinder-utils/arrayConversions\";\r\n\r\n// Pathfinding Algorithms\r\nimport { dijkstra } from \"./pathFindingAlgorithms/dijkstra\";\r\nimport { bfs } from \"./pathFindingAlgorithms/breadthFirstSearch\";\r\nimport { dfs } from \"./pathFindingAlgorithms/depthFirstSearch\";\r\nimport { astar } from \"./pathFindingAlgorithms/astar\";\r\nimport { bidirectionalSearch } from \"./pathFindingAlgorithms/bidirectionalSearch\";\r\n\r\n// Maze Generation Algorithm\r\nimport { generateMaze } from \"./generateMaze\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\n// Highlight Board Functions\r\nimport {\r\n    highlightGrid,\r\n    unHighlightGrid,\r\n    highlightGridDiagonals,\r\n    unHighlightGridDiagonals,\r\n} from \"./pathfinder-utils/highlightMazeNodes\";\r\n\r\n// Legend Component\r\nimport Legend from \"./pathfinder-utils/legend\";\r\n\r\n// Complexity table\r\nimport ComplexityTable from \"./pathfinder-utils/complexityTable\";\r\n\r\n//Stylesheets\r\nimport \"./pathfinderVisualiser.css\";\r\n\r\nconst x = 3;\r\nconst ROWS = 46 - x;\r\nconst COLS = 46 - x;\r\n\r\n// Constants to toggle Start/Finish/Wall on Grid\r\nconst START_NODE_STATE = 1;\r\nconst END_NODE_STATE = 2;\r\nconst WALL_NODE_STATE = 3;\r\n\r\nconst SPEED = 25;\r\n\r\nexport default class PathFinderVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            modifyingNodeState: 0,\r\n            START_NODE_ROW: 2,\r\n            START_NODE_COL: 2,\r\n            FINISH_NODE_ROW: ROWS - 3,\r\n            FINISH_NODE_COL: COLS - 3,\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            disableClearMazeButton: false,\r\n\r\n            highlightMazeNodes: true,\r\n            isGridDiagonalsHighlighted: false,\r\n            speed: SPEED,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setUpGrid();\r\n    }\r\n\r\n    setUpGrid() {\r\n        const grid = [];\r\n\r\n        const gridBox = document.getElementById(\"grid\");\r\n        gridBox.style.setProperty(\"--p-grid-rows\", ROWS);\r\n        gridBox.style.setProperty(\"--p-grid-cols\", COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++)\r\n            for (let j = 0; j < COLS; j++) grid.push(this.createNode(i, j));\r\n\r\n        this.setState({ grid });\r\n    }\r\n\r\n    clearBoard() {\r\n        this.setUpGrid();\r\n        const grid = this.state.grid;\r\n        for (let i = 0; i < grid.length; i++) {\r\n            const node = grid[i];\r\n            document\r\n                .getElementById(`node-${node.row}-${node.col}`)\r\n                .classList.remove(\"node-visited\");\r\n            document\r\n                .getElementById(`node-${node.row}-${node.col}`)\r\n                .classList.remove(\"node-shortest-path\");\r\n        }\r\n        this.setState({\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            highlightMazeNodes: true,\r\n        });\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        const algorithm = parseInt(\r\n            document.getElementById(\"pathFindingAlgoDropDown\").value\r\n        );\r\n        if (algorithm !== 0) this.visualiseAlgorithms(algorithm);\r\n        else {\r\n            alert(\"Select an Algorithm first!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    visualiseAlgorithms(algorithm) {\r\n        this.setState({\r\n            disableNodesButton: true,\r\n            disableMazesButton: true,\r\n            disableClearMazeButton: true,\r\n            modifyingNodeState: 0,\r\n        });\r\n        const {\r\n            grid,\r\n            START_NODE_COL,\r\n            START_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n        } = this.state;\r\n\r\n        const d2Grid = convert1Dto2DArray(grid, ROWS, COLS);\r\n\r\n        const STARTNODE = d2Grid[START_NODE_ROW][START_NODE_COL];\r\n        const FINISHNODE = d2Grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n\r\n        var visitedNodesInOrder, nodesInShortestPathOrder;\r\n\r\n        switch (algorithm) {\r\n            case 0:\r\n                alert(\"Select an algorithm first!\");\r\n                this.setState({\r\n                    disableMazesButton: false,\r\n                    disableNodesButton: false,\r\n                });\r\n                return;\r\n            case 1:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dijkstra(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 2:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = bfs(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 3:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = astar(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 4:\r\n                const [\r\n                    source_visited,\r\n                    dest_visited,\r\n                    sPathNodes,\r\n                    dPathNodes,\r\n                ] = bidirectionalSearch(d2Grid, STARTNODE, FINISHNODE);\r\n\r\n                this.animatePath(\r\n                    source_visited,\r\n                    sPathNodes\r\n                );\r\n                this.animatePath(dest_visited, dPathNodes);\r\n\r\n                return;\r\n            case 5:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dfs(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        this.animatePath(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    highlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes) {\r\n            highlightGrid(row, col, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    unHighlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes) {\r\n            unHighlightGrid(row, col, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    // change `isGridDiagonalsHighlighted` to true in state\r\n    // to highlight diagonals on board\r\n\r\n    highlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted) {\r\n            const nodes = convert1Dto2DArray(\r\n                this.state.grid.slice(),\r\n                ROWS,\r\n                COLS\r\n            );\r\n            highlightGridDiagonals(nodes, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    unHighlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted) {\r\n            const nodes = convert1Dto2DArray(\r\n                this.state.grid.slice(),\r\n                ROWS,\r\n                COLS\r\n            );\r\n            unHighlightGridDiagonals(nodes, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    toggleStartOrFinish(grid = [], row, col, NODE_ROW, NODE_COL, nodeType) {\r\n        const newGrid = grid.slice();\r\n\r\n        const currentNode = newGrid[ROWS * NODE_ROW + NODE_COL];\r\n        const newNode = newGrid[ROWS * row + col];\r\n\r\n        if (nodeType === \"START\") {\r\n            if (newNode.isWall || newNode.isFinish) {\r\n                return false;\r\n            } else {\r\n                currentNode.isStart = false;\r\n                newNode.isStart = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else if (nodeType === \"FINISH\") {\r\n            if (newNode.isWall || newNode.isStart) {\r\n                return false;\r\n            } else {\r\n                currentNode.isFinish = false;\r\n                newNode.isFinish = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleWall(grid, row, col) {\r\n        const newGrid = grid.slice();\r\n        const currentNode = newGrid[ROWS * row + col];\r\n        if (!currentNode.isFinish && !currentNode.isStart) {\r\n            currentNode.isWall = !currentNode.isWall;\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n\r\n    handleNodeOperations(row, col, NODE_STATE) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            grid,\r\n        } = this.state;\r\n        switch (NODE_STATE) {\r\n            case 1:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        START_NODE_ROW,\r\n                        START_NODE_COL,\r\n                        \"START\"\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        START_NODE_ROW: row,\r\n                        START_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 2:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        FINISH_NODE_ROW,\r\n                        FINISH_NODE_COL,\r\n                        \"FINISH\"\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        FINISH_NODE_ROW: row,\r\n                        FINISH_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 3:\r\n                this.toggleWall(grid, row, col);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    createNode(row, col) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n        } = this.state;\r\n        return {\r\n            row,\r\n            col,\r\n            isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n            isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n            cost: {\r\n                F: Infinity,\r\n                G: Infinity,\r\n                H: Infinity,\r\n            },\r\n        };\r\n    }\r\n\r\n    modifyNodeState(STATE) {\r\n        this.setState({ modifyingNodeState: STATE });\r\n    }\r\n\r\n    generateMaze(grid) {\r\n        this.setState({\r\n            disableMazesButton: true,\r\n            disableClearMazeButton: false,\r\n        });\r\n        const twoDArray = convert1Dto2DArray(grid, ROWS, COLS);\r\n        const mazeGrid = generateMaze(twoDArray, ROWS, COLS);\r\n        const OneDArray = convert2Dto1DArray(mazeGrid);\r\n        this.setState({ grid: OneDArray });\r\n    }\r\n\r\n    animatePath(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        this.setState({ disableNodesButton: true, highlightMazeNodes: false });\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, this.state.speed * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className = \"node node-visited\";\r\n                }\r\n            }, this.state.speed * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).classList = \"node node-shortest-path\";\r\n                }\r\n                if (node.isFinish) {\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            disableClearMazeButton: false,\r\n                        });\r\n                    }, 1000);\r\n                }\r\n            }, this.state.speed * i);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            grid,\r\n            modifyingNodeState,\r\n            disableMazesButton,\r\n            disableNodesButton,\r\n            disableClearMazeButton,\r\n        } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7 mb-1\">\r\n                            <div className=\"box shadowT mb-2\">\r\n                                <div\r\n                                    onMouseOut={() =>\r\n                                        this.unHighlightDiagonals()\r\n                                    }\r\n                                    onMouseOver={() =>\r\n                                        this.highlightDiagonals()\r\n                                    }\r\n                                    id=\"grid\"\r\n                                    className=\"grid\"\r\n                                >\r\n                                    {grid.map((node, idx) => {\r\n                                        const {\r\n                                            row,\r\n                                            col,\r\n                                            isStart,\r\n                                            isFinish,\r\n                                            isWall,\r\n                                        } = node;\r\n                                        return (\r\n                                            <Node\r\n                                                key={idx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                row={row}\r\n                                                onNodeClick={(row, col) =>\r\n                                                    this.handleNodeOperations(\r\n                                                        row,\r\n                                                        col,\r\n                                                        modifyingNodeState\r\n                                                    )\r\n                                                }\r\n                                                onNodeOver={(row, col) =>\r\n                                                    this.highlightNodes(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                                onNodeOut={(row, col) =>\r\n                                                    this.unHighlightNodes(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 shadowT rounded-b mb-2 bg-light\">\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn bg-start\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(START_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Source\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn bg-end\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(END_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Destination\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn btn-dark\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(WALL_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Wall\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableMazesButton}\r\n                                    className=\"btn btn-secondary\"\r\n                                    onClick={() => this.generateMaze(grid)}\r\n                                >\r\n                                    Generate Maze\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableClearMazeButton}\r\n                                    className=\"btn btn-secondary\"\r\n                                    onClick={() => this.clearBoard()}\r\n                                >\r\n                                    Clear Maze\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <div className=\"input-group\">\r\n                                    <select\r\n                                        disabled={disableNodesButton}\r\n                                        id=\"pathFindingAlgoDropDown\"\r\n                                        className=\"custom-select\"\r\n                                        defaultValue=\"0\"\r\n                                    >\r\n                                        <option disabled value=\"0\">\r\n                                            Select Algorithm\r\n                                        </option>\r\n                                        <option value=\"1\">Dijkstras</option>\r\n                                        <option value=\"2\">\r\n                                            Breadth First Search\r\n                                        </option>\r\n                                        <option value=\"5\">\r\n                                            Depth First Search\r\n                                        </option>\r\n                                        <option value=\"3\">A* Search</option>\r\n                                        <option value=\"4\">\r\n                                            Bi-Directional Search\r\n                                        </option>\r\n                                    </select>\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            disabled={disableNodesButton}\r\n                                            onClick={() =>\r\n                                                this.selectAlgorithm()\r\n                                            }\r\n                                            className=\"btn bg-purple\"\r\n                                        >\r\n                                            Perform Search\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <Legend />\r\n                            <ComplexityTable />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}