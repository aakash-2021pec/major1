{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sharm\\\\OneDrive\\\\Documents\\\\GitHub\\\\major1\\\\algorithms-visualiser\\\\src\\\\wordSearchVisualiser\\\\wordSearch-utils\\\\problemStatement.jsx\";\nimport React from \"react\";\n\nconst ProblemStatement = () => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"mt-2\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }\n}), \"Given a 2D board and a word, find if the word exists in the grid.\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }\n}), \"The word can be constructed from letters of sequentially adjacent cell, where \\\"adjacent\\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }\n}, \"Example:\"), /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"pre\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 13\n  }\n}, \"board\"), \" = [\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 29\n  }\n}), \"\\xA0\\xA0\\xA0\\xA0['A','B','C','E'],\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 13\n  }\n}), \"\\xA0\\xA0\\xA0\\xA0['S','F','C','S'],\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 13\n  }\n}), \"\\xA0\\xA0\\xA0\\xA0['A','D','E','E']\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 13\n  }\n}), \"]\", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 13\n  }\n}), /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 13\n  }\n}), \"Given word = \\\"\", /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 27\n  }\n}, \"ABCCED\"), \"\\\", return \", /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 50\n  }\n}, \"true\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 62\n  }\n}), \"Given word = \\\"\", /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 27\n  }\n}, \"SEE\"), \"\\\", return \", /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 47\n  }\n}, \"true\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 59\n  }\n}), \"Given word = \\\"\", /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 27\n  }\n}, \"ABCB\"), \"\\\", return \", /*#__PURE__*/React.createElement(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 48\n  }\n}, \"false\")));\n\nexport default ProblemStatement;","map":{"version":3,"sources":["C:/Users/sharm/OneDrive/Documents/GitHub/major1/algorithms-visualiser/src/wordSearchVisualiser/wordSearch-utils/problemStatement.jsx"],"names":["React","ProblemStatement"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAgB,GAAG,mBACrB;AAAK,EAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,oFAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJJ,0NAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EATJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAXJ,eAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAZJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,uBACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADpB,qDAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHJ,qDAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALJ,oDAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPJ,oBASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EATJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAVJ,kCAWkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXlB,8BAWyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAXzC,oBAWqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAXrD,kCAYkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAZlB,8BAYsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAZtC,oBAYkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAZlD,kCAakB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAblB,8BAauC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAbvC,CAbJ,CADJ;;AAgCA,eAAeA,gBAAf","sourcesContent":["import React from \"react\";\r\n\r\nconst ProblemStatement = () => (\r\n    <div className=\"mt-2\">\r\n        <br />\r\n        Given a 2D board and a word, find if the word exists in the grid.\r\n        <br />\r\n        <br />\r\n        The word can be constructed from letters of sequentially adjacent cell,\r\n        where \"adjacent\" cells are those horizontally or vertically neighboring.\r\n        The same letter cell may not be used more than once.\r\n        <br />\r\n        <br />\r\n        <b>Example:</b>\r\n        <br />\r\n        <br />\r\n        <pre>\r\n            <b>board</b> = [<br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['A','B','C','E'],\r\n            <br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['S','F','C','S'],\r\n            <br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['A','D','E','E']\r\n            <br />\r\n            ]\r\n            <br />\r\n            <br />\r\n            Given word = \"<b>ABCCED</b>\", return <b>true</b> <br />\r\n            Given word = \"<b>SEE</b>\", return <b>true</b> <br />\r\n            Given word = \"<b>ABCB</b>\", return <b>false</b>\r\n        </pre>\r\n    </div>\r\n);\r\n\r\nexport default ProblemStatement;\r\n"]},"metadata":{},"sourceType":"module"}